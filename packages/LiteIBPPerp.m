(* ::Package:: *)

BeginPackage[ "LiteIBPPerp`",{"LiteMomentum`"}]


LIBPgtInv::usage = "LIBPgtInv[opdim,rk] is the tensor projector matrix on the orthogonal tensor basis with tensor rank rk, and orthogonal dimension odim."
LIBPgt::usage = "LIBPgt[v1,v2,...] returns a list whose i-th element is the contraction of the input with the i-th orthogonal tensor, where the input vectors must belong to the orthogonal space."
LIBPgtMaxRank::usage = "LIBPgtMaxRank is the maximal rank currently implemented."


Begin[ "`Private`"]


LIBPgtInv[d_,0]:={{1}};
LIBPgtInv[d_,2]:={{d^(-1)}};
LIBPgtInv[d_,4]:={{-((1/2 + d/2)/(d - d^2/2 - d^3/2)), 1/(2*(d - d^2/2 - d^3/2)), 1/(2*(d - d^2/2 - d^3/2))}, {1/(2*(d - d^2/2 - d^3/2)), -((1/2 + d/2)/(d - d^2/2 - d^3/2)), 1/(2*(d - d^2/2 - d^3/2))}, {1/(2*(d - d^2/2 - d^3/2)), 1/(2*(d - d^2/2 - d^3/2)), -((1/2 + d/2)/(d - d^2/2 - d^3/2))}};
LIBPgtInv[d_,6]:={{-((1/8 - (3*d)/16 - d^2/16)/(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8))}, {-1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -((1/8 - (3*d)/16 - d^2/16)/(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16))}, {-1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -((1/8 - (3*d)/16 - d^2/16)/(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16))}, {-1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -((1/8 - (3*d)/16 - d^2/16)/(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16))}, {1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -((1/8 - (3*d)/16 - d^2/16)/(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8))}, {1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -((1/8 - (3*d)/16 - d^2/16)/(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16))}, {-1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -((1/8 - (3*d)/16 - d^2/16)/(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16))}, {1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -((1/8 - (3*d)/16 - d^2/16)/(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8))}, {1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -((1/8 - (3*d)/16 - d^2/16)/(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16))}, {1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -((1/8 - (3*d)/16 - d^2/16)/(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16))}, {1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -((1/8 - (3*d)/16 - d^2/16)/(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16))}, {-1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -((1/8 - (3*d)/16 - d^2/16)/(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8))}, {1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -((1/8 - (3*d)/16 - d^2/16)/(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8))}, {1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -((1/8 - (3*d)/16 - d^2/16)/(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8))}, {-1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), 1/(8*(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -1/(8*(d - (5*d^2)/4 + d^3/8 + d^4/8)), -((1/8 - (3*d)/16 - d^2/16)/(d - (3*d^2)/4 - d^3/2 + (3*d^4)/16 + d^5/16))}};


LIBPgt[]:={1};
LIBPgt[v1_,v2_]:={mp[v1,v2]};
LIBPgt[v1_,v2_,v3_,v4_]:={mp[v1,v2] mp[v3,v4],mp[v1,v3] mp[v2,v4],mp[v1,v4] mp[v2,v3]};
LIBPgt[v1_,v2_,v3_,v4_,v5_,v6_]:={mp[v1,v2] mp[v3,v4] mp[v5,v6],mp[v1,v2] mp[v3,v5] mp[v4,v6],mp[v1,v2] mp[v3,v6] mp[v4,v5],mp[v1,v3] mp[v2,v4] mp[v5,v6],mp[v1,v3] mp[v2,v5] mp[v4,v6],mp[v1,v3] mp[v2,v6] mp[v4,v5],mp[v1,v4] mp[v2,v3] mp[v5,v6],mp[v1,v4] mp[v2,v5] mp[v3,v6],mp[v1,v4] mp[v2,v6] mp[v3,v5],mp[v1,v5] mp[v2,v3] mp[v4,v6],mp[v1,v5] mp[v2,v4] mp[v3,v6],mp[v1,v5] mp[v2,v6] mp[v3,v4],mp[v1,v6] mp[v2,v3] mp[v4,v5],mp[v1,v6] mp[v2,v4] mp[v3,v5],mp[v1,v6] mp[v2,v5] mp[v3,v4]};


LIBPgtMaxRank = 6;


End[] (* `Private` *)


EndPackage[]
